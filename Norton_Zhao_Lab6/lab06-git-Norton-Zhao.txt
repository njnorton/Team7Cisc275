Git Intro 2 Activity
==================

A. Form teams
-------------

Form a 2-person team. Try to find someone who uses the same platform as you (e.g., Windows, Linux, etc.). If you can't, that's fine. If you are the odd-person-out, join a team of 2 with permission of your TA.

Make a repo on GitHub.

Complete the exercises below, and fill in your answers in the spaces provided below each question.
Once you have completed all the exercises and filled in this file with your answers, 
add this file to your working directory (which you will create in section G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget to push it at the end!

1.  List your team members below.

    Grant Zhao



    Nick Norton


D. Getting help
---------------

Run the following commands.

    git help
    git help -ag
    git help init

1.  What does `git help` do?


    git help lists common Git commands used in various situations
	


2.  What does `-ag` cause `git help` to do?


    -ag causes Git help to list all available commands and a list of useful Git guides



G. Basic commands
-----------------

Open the terminal. Navigate to your team’s repository directory.

Create a directory inside of your team repository which will act as your submission directory for this lab.
The directory should be named according to the last names of your team members following the format below.

    <member1LastName>_<member2LastName>_Lab6

Use a plain text editor to create `names.txt` inside the directory you just created.
Put the names of your team in the file. Save and exit.

Run `git status` before and after each of these commands.

    git add names.txt
    git commit –m “Add our names.”
    git log

1.  What kind of information does `git status` report?


    git status reports what branch we’re on, if our branch is up to date, what changes
    need to be committed and what changes are not staged for commit.



2.  What does `git add names.txt` do?


    git add names.txt stages the file names.txt



3.  What does `git commit -m "Add our names."` do?


    git commit -m “Add our names.” records changes to the repository with a commit
    message.



Use a plain text editor to create the following files:

-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real information here)

-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    git add .
    git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   message, save and quit (press esc and then type :wq).
    git log

4.  What does `git add .` do? What do you think `.` means?


    git add . stages all modified and new files in the directory. ‘.’ means all files.



5.  What does `git commit` (without -m) do?


    git commit (without -m) opens the vim editor which allows you to enter a more detailed
    commit message



6.  If you want to write a more detailed commit message (which is
    good practice) what command would you use?


    git commit



7.  What does `git log do`?


    git log shows a history of the commits to the repo and their commit messages



H. Stage/Cache/Index
--------------------

Do the following:

-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.
    -done

-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.
    -done

-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team member).

Run the following commands:

    git add names.txt
    git status

1.  Below write each file name under the state that its changes are
    currently in. Compose a definition for each state.

    **Staged** 

    files with recorded changes that are ready to be pushed to the repo with a commit message

    ```
    names.txt



    ```

    **Unstaged**

    files with recorded changes that are not ready to be pushed to the repo with a commit message

    ```

    movies.txt

    ```

    **Untracked**

    files whose changes are not recorded/not version controlled

    ```
    foods.txt


    ```

1.  If you run `git commit` what changes will be committed (***DON’T DO IT***)?

    ```

    It will record the changes to names.txt to the repository

    ```

2.  What command do you run to stage changes?

    ```

    git add <file>

    ```

3.  What command do you run to unstage changes?

    ```

    git reset HEAD <file>

    ```

Run the following commands:

    git diff
    git diff --cached

1.  What does `git diff` display?

    ```
    The changes made to movies.txt


    ```

2.  What does `git diff --cached` display?

    ```

    Shows the changed made  to Names.txt

    ```

3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    and stage the changes to `movies.txt`. Write them here. Execute your commands and
    confirm they worked.

    ```
    git reset HEAD names.txt
    git add movies.txt


    ```

4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`. What do you observe? Explain what you think is
    going on.

    ```
    We told git to stage movies.txt but it realizes that changes have been made since then.
    Thats why it has movies.txt as both ready to be pushed and unstaged.


    ```

5.  Delete `names.txt`. Then run `git status`. What do you observe?
    Explain what you think is going on.

    ```

    In changes not staged it lists names.txt as deleted. Since we deleted names.txt, git 
    sees that as a change and lists that names.txt was deleted as an unstaged change.

    ```

6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.

    ```

    In addition to everything listed from before. It now lists movies as deleted and last-
    movies as untracked. Git cannot find movies.txt so it lists it as deleted and finds last-movies.txt
    and treats it as a new, untracked file. 

    ```

7.  Formulate a sequence of commands to stage all changes including the
    untracked file and commit (with any reasonable message you like).
    Execute them.

    ```
    git add last-movies.txt
    git add names.txt
    git add foods.txt
    git commit -m “Updated lab files”


    ```

8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. What does it hold?

    ```
    The list of files that are ready to be committed as they were at the time they were
    staged  
    

    ```

9.  Why have a `stage`? Why not just commit all changes since the last
    commit?

    ```
    Because when you stage a file you can still change things, then commit the file at the 
    time you staged it.    


    ```

I. Undo
-------

Run the following commands:

    git log
    git status
    git reset --soft "HEAD^"
    git log
    git status

1.  What does `git reset --soft ``"HEAD^" `do?

    ```

    Resets history and project back to the stage/index.

    ```

Run the following commands:

    git commit –m "Redo."
    git log
    git status
    git reset --hard "HEAD^"
    git log
    git status

1.  What does `git reset --hard ``"HEAD^"`` `do?

    ```
    It throws away all uncommitted changes.
    Resets head to another commit.
    Resets the working copy to it as well.


    ```

2.  What is the difference between `--hard` and `--soft`?

    ```
    Git soft reset only puts the head to another commit.
    Git hard resets head and working directory.


    ```

3.  What do you think `HEAD` means?

    ```
    Its another name for the current point in the branch you're working in.


    ```

4.  What do you think `HEAD^` means?

    ```
    Parent of the tip of your current branch.

    ```

5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), and 2) submit this document.

6. Push this document, completed, to your repo.

J. Helpful resources
--------------------

-   <https://git-scm.com/doc>

-   <https://www.atlassian.com/git/tutorials/>

-   github-git-cheat-sheet.pdf on class website

K. Copyright and Licensing
--------------------------

Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
